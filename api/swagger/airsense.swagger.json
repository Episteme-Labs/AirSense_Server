{
  "openapi": "3.0.0",
  "info": {
    "title": "IoT Device & Mobile API",
    "description": "REST API for communication between the Mobile App and the Backend, managing MQTT-based IoT devices.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.domain.com",
      "description": "Production Server"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Bearer token for authentication."
      }
    },
    "schemas": {
      "SensorReading": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          }
        },
        "example": {
          "value": 22.5,
          "unit": "°C"
        }
      },
      "SensorSet": {
        "type": "object",
        "description": "Latest sensor readings from the device.",
        "properties": {
          "pm25": {
            "$ref": "#/components/schemas/SensorReading"
          },
          "co2": {
            "$ref": "#/components/schemas/SensorReading"
          },
          "co": {
            "$ref": "#/components/schemas/SensorReading"
          },
          "temperature": {
            "$ref": "#/components/schemas/SensorReading"
          },
          "humidity": {
            "$ref": "#/components/schemas/SensorReading"
          }
        },
        "example": {
          "pm25": {
            "value": 25.5,
            "unit": "µg/m³"
          },
          "co2": {
            "value": 450,
            "unit": "ppm"
          },
          "co": {
            "value": 0.5,
            "unit": "ppm"
          },
          "temperature": {
            "value": 22.5,
            "unit": "°C"
          },
          "humidity": {
            "value": 55,
            "unit": "%"
          }
        }
      },
      "DeviceStatus": {
        "type": "object",
        "description": "Latest status and health of the device.",
        "properties": {
          "power": {
            "type": "object",
            "properties": {
              "voltage": {
                "type": "number"
              },
              "status": {
                "type": "string"
              }
            }
          },
          "connectivity": {
            "type": "object",
            "properties": {
              "wifi": {
                "type": "object",
                "properties": {
                  "ssid": {
                    "type": "string"
                  },
                  "signal": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "uptime": {
            "type": "string"
          },
          "firmware": {
            "type": "string"
          }
        },
        "example": {
          "power": {
            "voltage": 5.1,
            "status": "ok"
          },
          "connectivity": {
            "wifi": {
              "ssid": "HomeWiFi",
              "signal": -45,
              "status": "connected"
            }
          },
          "uptime": "2h30m",
          "firmware": "v1.0.0"
        }
      },
      "Device": {
        "type": "object",
        "description": "Represents a single registered device.",
        "properties": {
          "deviceID": {
            "type": "string",
            "example": "device-123"
          },
          "name": {
            "type": "string",
            "example": "Living Room Sensor"
          },
          "isOnline": {
            "type": "boolean",
            "example": true
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time",
            "example": "2026-01-18T10:35:00Z"
          },
          "status": {
            "$ref": "#/components/schemas/DeviceStatus"
          },
          "sensors": {
            "$ref": "#/components/schemas/SensorSet"
          }
        }
      },
      "DeviceList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "deviceID": {
              "type": "string",
              "example": "device-123"
            },
            "name": {
              "type": "string",
              "example": "Living Room Sensor"
            },
            "isOnline": {
              "type": "boolean",
              "example": true
            },
            "lastSeen": {
              "type": "string",
              "format": "date-time",
              "example": "2026-01-18T10:35:00Z"
            }
          }
        }
      },
      "DeviceUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A user-friendly name for the device.",
            "example": "Bedroom Sensor"
          }
        }
      },
      "HistoryDataPoint": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "number"
          }
        },
        "example": {
          "timestamp": "2026-01-17T01:00:00Z",
          "value": 435
        }
      },
      "HistoryResponse": {
        "type": "object",
        "properties": {
          "sensor": {
            "type": "string",
            "example": "co2"
          },
          "unit": {
            "type": "string",
            "example": "ppm"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoryDataPoint"
            }
          },
          "stats": {
            "type": "object",
            "description": "Aggregate statistics if requested.",
            "properties": {
              "avg": {
                "type": "number"
              },
              "min": {
                "type": "number"
              },
              "max": {
                "type": "number"
              }
            },
            "example": {
              "avg": 450,
              "min": 400,
              "max": 500
            }
          }
        }
      },
      "CommandRequest": {
        "type": "object",
        "description": "The command to send to the device.",
        "properties": {
          "action": {
            "type": "string",
            "description": "The command to execute.",
            "enum": [
              "calibrate",
              "setInterval",
              "reboot",
              "updateFirmware",
              "setAlerts"
            ],
            "example": "calibrate"
          },
          "params": {
            "type": "object",
            "description": "Parameters for the command. For setAlerts, params include 'thresholds' object with sensor names and high/low values.",
            "example": {
              "thresholds": {
                "pm25": {
                  "high": 50
                }
              }
            }
          }
        }
      },
      "CommandStatus": {
        "type": "object",
        "description": "The status or result of a command.",
        "properties": {
          "commandID": {
            "type": "string",
            "example": "calibrate-001"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "success",
              "error"
            ],
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "CO2 calibration complete"
          },
          "details": {
            "type": "object",
            "description": "Optional details from the device response.",
            "example": {
              "preCalib": 455,
              "postCalib": 400
            }
          },
          "responseTimestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2026-01-18T10:40:05Z"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "example": {
          "code": "INVALID_SENSOR",
          "message": "Invalid sensor specified."
        }
      }
    }
  },
  "paths": {
    "/api/v1/devices": {
      "get": {
        "summary": "Get all user devices",
        "operationId": "getDevices",
        "tags": [
          "Devices"
        ],
        "responses": {
          "200": {
            "description": "A list of the user's devices.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Register a new device",
        "operationId": "registerDevice",
        "tags": [
          "Devices"
        ],
        "description": "Registers a new device for the user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deviceID": {
                    "type": "string",
                    "description": "The unique ID of the device.",
                    "example": "device-123"
                  },
                  "name": {
                    "type": "string",
                    "description": "A user-friendly name for the device.",
                    "example": "Living Room Sensor"
                  }
                },
                "required": [
                  "deviceID"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Device registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid deviceID).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict (e.g., deviceID already exists)."
          }
        }
      }
    },
    "/api/v1/devices/{deviceID}": {
      "parameters": [
        {
          "name": "deviceID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "device-123",
          "description": "The unique ID of the device."
        }
      ],
      "get": {
        "summary": "Get device details",
        "operationId": "getDeviceById",
        "tags": [
          "Devices"
        ],
        "description": "Retrieves the complete current state of a device, including latest sensor and status data.",
        "responses": {
          "200": {
            "description": "Successful response with device details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Device not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update device metadata",
        "operationId": "updateDevice",
        "tags": [
          "Devices"
        ],
        "description": "Update user-configurable metadata, like the device's name.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Device updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid name)."
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Device not found."
          }
        }
      }
    },
    "/api/v1/devices/{deviceID}/history": {
      "parameters": [
        {
          "name": "deviceID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "device-123",
          "description": "The unique ID of the device."
        }
      ],
      "get": {
        "summary": "Get device history (statistics)",
        "operationId": "getDeviceHistory",
        "tags": [
          "Statistics"
        ],
        "description": "Get historical time-series data for a specific sensor.",
        "parameters": [
          {
            "name": "sensor",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "pm25",
                "co2",
                "co",
                "temperature",
                "humidity"
              ]
            },
            "example": "co2",
            "description": "The sensor to query."
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2026-01-17T00:00:00Z",
            "description": "Start of the time range (ISO 8601)."
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2026-01-18T00:00:00Z",
            "description": "End of the time range (ISO 8601)."
          },
          {
            "name": "resolution",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "minute",
                "hour",
                "day"
              ],
              "default": "hour"
            },
            "description": "Time interval for data aggregation."
          },
          {
            "name": "stats",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "avg",
                  "min",
                  "max"
                ]
              }
            },
            "description": "Aggregate stats to include (e.g., avg,min,max). If provided, the response includes a 'stats' object with the requested aggregates.",
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1
            },
            "description": "Maximum number of data points to return."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            },
            "description": "Offset for pagination."
          }
        ],
        "responses": {
          "200": {
            "description": "A set of historical data points.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., missing query parameters)."
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Device not found."
          }
        },
        "x-rate-limit-limit": 60,
        "x-rate-limit-period": "1m"
      }
    },
    "/api/v1/devices/{deviceID}/commands": {
      "parameters": [
        {
          "name": "deviceID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "device-123",
          "description": "The unique ID of the device."
        }
      ],
      "post": {
        "summary": "Send a command to a device",
        "operationId": "sendCommand",
        "tags": [
          "Remote Control"
        ],
        "description": "Sends a command to the device via the backend. This is asynchronous. The backend handles concurrency by queuing or rejecting multiple commands to the same device.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted. The command was successfully sent to the backend for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandStatus"
                },
                "example": {
                  "commandID": "calibrate-001",
                  "status": "pending",
                  "message": "Command sent to device. Awaiting response."
                }
              }
            },
            "headers": {
              "X-Command-ID": {
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the command for tracking.",
                "example": "calibrate-001"
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid action)."
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Device not found."
          }
        },
        "x-rate-limit-limit": 10,
        "x-rate-limit-period": "1m"
      }
    },
    "/api/v1/devices/{deviceID}/commands/{commandID}": {
      "parameters": [
        {
          "name": "deviceID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "device-123",
          "description": "The unique ID of the device."
        },
        {
          "name": "commandID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "calibrate-001",
          "description": "The ID of the command (returned by the POST)."
        }
      ],
      "get": {
        "summary": "Get command status",
        "operationId": "getCommandStatus",
        "tags": [
          "Remote Control"
        ],
        "description": "Poll this endpoint to get the status and result of a previously sent command.",
        "responses": {
          "200": {
            "description": "The final status of the command (success/error) or 'pending' if not yet complete.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Command not found or expired."
          }
        }
      }
    }
  }
}